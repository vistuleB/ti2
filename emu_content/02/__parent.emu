|> Chapter
    |> ChapterTitle

        Boolesche Schaltkreise (nicht im Sommersemester 2025)

    Boolesche Schaltkreise sind ein idealisiertes
    Modell echter elektronischer Schaltkreise.
    Als primitive Bausteine haben wir Boolesche
    Operatoren, auch _Gatter_ (englisch _gates_)
    genannt, die mehrere (typischerweise ein oder zwei)
    Signale zu einem Ausgabe-Signal kombinieren.
    Die Signale können nur zwei Werte annehmen:
    wahr/falsch bzw. 1/0 bzw. `true/false`. Hier
    sehen Sie die drei üblichsten Gatter:

    |> figure
        |> img
            style=width:20em
            src=img/circuits/and-or-not-gates.svg

    Von links nach rechts sind dies: das Und-Gatter
    (_and-gate_), Oder-Gatter (_or-gate_) und das
    Nicht-Gatter (_not-gate_). In C, C++ und Java
    kennen Sie diese Booleschen Operatoren als
    `&&`, `||` und `!`. Was diese Operatoren
    _tun_, können wir als _Wahrheitstabelle_ darstellen.
    Wir listen alle Kombinationen für \(x,y\) auf
    und schreiben in jede Zeile auch den Wert, den
    der Operator ausgibt.

    $$
    \begin{array}{ll|l}
    x&amp;y&amp;x \wedge y \\ \hline
    0&amp;0&amp;0 \\
    0&amp;1&amp;0 \\
    1&amp;0&amp;0 \\
    1&amp;1&amp;1
    \end{array}
    \qquad \qquad
    \begin{array}{ll|l}
    x&amp;y&amp;x \vee y \\ \hline
    0&amp;0&amp;0 \\
    0&amp;1&amp;1 \\
    1&amp;0&amp;1 \\
    1&amp;1&amp;1
    \end{array}
    \qquad \qquad
    \begin{array}{l|l}
    x&amp;\neg x \\ \hline
    0&amp;1 \\
    1&amp;0 \\
    \end{array}
    $$

    Die dritte Zeile der mittleren Tabelle sagt
    beispielsweise aus, dass \(1 \vee 0 = 1\) gilt.

    Vielleicht wünschen Sie sich noch mehr Gates,
    zum Beispiel ein if-then-else-Gate mit drei
    Inputs \(x,y,z\), welches \(y\) ausgibt, wenn
    \(x\) wahr ist und ansonsten \(z\) ausgibt.
    So ein Gate können Sie sich einfach aus And,
    Or, Not bauen:

    |> figure
        |> img
            style=height:13em
            src=img/circuits/if-then-else-gate.svg
            loading=lazy
        |> figcaption

            `if` \(x\) `then` \(y\) `else` \(z\)

    Jeder Schaltkreis _berechnet_ eine Funktion
    (formale Definition weiter unten). Informell
    gesprochen, wenn wir Wahrheitswerte (0/1) in
    die Input-Gates reinstecken, dann fließen diese
    durch den Schaltkreis und werden von den
    AND/OR/NOT-Gates entsprechend ihrer Funktion
    kombiniert und werden schließlich an den
    Output-Gates ausgegeben:

    |> figure
        |> img
            style=height:13em
            src=img/circuits/if-then-else-gate-with-values.svg
            loading=lazy
        |> figcaption

        Das if-then-else-Gate mit einer konkreten Belegung und einem Ausgabewert

    |> Exercise

        Bauen Sie folgende Gates aus And-, Or- und Not-Gates zusammen:

        |> ol
            |> li
                Ein XOR-Gate $x \oplus y$. Es gibt 1 aus, wenn einer der beiden Inputs 1 ist und der andere 0.
            |> li
                Ein Majority-Gate $Maj(x,y,z)$. Es gibt 1 aus, wenn mindestens zwei seiner Inputs 1 ist.
            |> li
                Ein $n$-faches XOR-Gate

                |> figure
                    |> img
                        style=height:4em
                        src=img/circuits/n-fold-xor.svg
                        loading=lazy

                welches 1 ausgibt, wenn eine ungerade Anzahl seiner Inputs auf 1 stehen.
            |> li
                Ein $n$-faches Majority-Gate
                $\mathrm{Maj}(x_1,\ldots,x_n)$,
                welches 1 ausgibt, wenn mehr als $n/2$ der Inputs auf 1 stehen. Sie können annehmen, dass $n$ ungerade ist, wenn es Ihnen hilft.

                Können Sie vermeiden, dass Ihr Schaltkreis riesengroß wird? Kriegen Sie beispielsweise für einen Schaltkreis hin, den man realistischerweise herstellen kann?

    Je nach Kontext kann es hilfreich sein, Gatter mit beliebig vielen Inputs zuzulassen, beispielsweise $x_1 \land x_2 \land \ldots \land x_n$ als ein Gate darzustellen:

    |> figure
        |> img
            style=height:10em
            src=img/circuits/and-fan-in-n.svg
            loading=lazy
