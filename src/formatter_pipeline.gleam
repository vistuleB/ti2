import gleam/string
import desugarer_library as dl
import infrastructure.{type Pipe} as infra
import gleam/list
import prefabricated_pipelines as pp

const minimum_line_wrap_length = 40

const p_cannot_contain = [
  "Carousel",
  "CarouselItems",
  "CarouselItem",
  "Chapter",
  "ChapterTitle",
  "Definition",
  "Example",
  "Exercise",
  "Highlight",
  "Lemma",
  "MathBlock",
  "Observation",
  "Proposition",
  "Proof",
  "Remark",
  "Statement",
  "Sub",
  "SubTitle",
  "SubtopicAnnouncement",
  "Theorem",
  "TopicAnnouncement",
  "WriterlyBlankLine",
  "WriterlyCodeBlock",
  "br",
  "colgroup",
  "thead",
  "tbody",
  "tr",
  "td",
  "section",
  "Index",
  "center",
  "li",
  "ul",
  "ol",
  "h1",
  "h2",
  "h3",
  "pre",
  "div",
  "hr",
  "figure",
  "img",
  "table",
]

const p_cannot_be_contained_in = [
  "code",
  "p",
  "pre",
  "h1",
  "h2",
  "h3",
  "span",
  "Carousel",
  "ChapterTitle",
  "SubTitle",
  "Math",
  "MathBlock",
  "Menu",
  "NoWrap",
  "Index",
  "QED",
  "SubtopicAnnouncement",
  "TopicAnnouncement",
]

fn ends_with_dollar_starts_with_punctuation(s1: String,
s2: String) {
  string.ends_with(s1, "$") && {
    string.starts_with(s2, ".") ||
    string.starts_with(s2, ",") ||
    string.starts_with(s2, ":") ||
    string.starts_with(s2, ";")
  }
}

pub fn formatter_pipeline(
  line_length: Int,
  indentation_line_length_penalty: Int, // amount subtracted from the line_length at each new level of indentation (with Sub, Chapter)
) -> List(Pipe) {
  [
    [
      dl.identity(),
      dl.find_replace__outside(#("&amp;", "&"), []),
    ],
    pp.create_mathblock_elements([infra.DoubleDollar, infra.BackslashSquareBracket, infra.BeginEndAlign, infra.BeginEndAlignStar], infra.DoubleDollar),
    [
      dl.concatenate_consecutive_lines_if(ends_with_dollar_starts_with_punctuation),
    ],
    pp.create_math_elements([infra.BackslashParenthesis, infra.SingleDollar], infra.SingleDollar, infra.BackslashParenthesis),
    [
      dl.trim_spaces_around_newlines__outside(["pre", "Math", "MathBlock", "WriterlyCodeBlock"]),
      dl.trim_ending_spaces_except_last_line(),
      dl.strip_delimiters_inside_if(#(
        "MathBlock",
        infra.latex_strippable_display_delimiters(),
        infra.descendant_text_contains(_, "\\begin{align")
      )),
      dl.group_consecutive_children__outside(#("p", p_cannot_contain), p_cannot_be_contained_in),
      dl.concatenate_text_nodes(),
      dl.insert_text_start_end(#("tt", #("`", "`"))),
      dl.fold_contents_into_text("tt"),
      dl.insert_text_start_end(#("code", #("`", "`"))),
      dl.fold_contents_into_text("code"),
      dl.insert_text_start_end_if_unique_attr(#("span", "style", "font-variant:small-caps;", #("`", "`{sc}"))),
      dl.fold_children_into_text_if(#("span", infra.v_has_key_val(_, "style", "font-variant:small-caps;"))),
      dl.wrap_adjacent_non_whitespace_text_with(#(["Math"], "NoWrap")),
      dl.line_rewrap_no2__outside(
        #(["Chapter", "Sub"],
        line_length,
        minimum_line_wrap_length,
        indentation_line_length_penalty,
        infra.is_v_and_tag_is_one_of(_, ["Math", "NoWrap"])), ["MathBlock", "pre", "WriterlyCodeBlock"],
      ),
      dl.concatenate_text_nodes(),
      dl.unwrap("NoWrap"),
      dl.last_to_first_concatenate_text_nodes(),
      dl.fold_contents_into_text("Math"),
      dl.delete_empty_lines(),
      dl.split_first_line_after_prefix(#("MathBlock", "\\begin{align}")),
      dl.split_first_line_after_prefix(#("MathBlock", "\\begin{align*}")),
      dl.split_last_line_before_suffix(#("MathBlock", "\\end{align}")),
      dl.split_last_line_before_suffix(#("MathBlock", "\\end{align*}")),
      dl.unwrap("WriterlyBlankLine"),
      dl.trim_spaces_around_newlines__outside(["pre", "Math", "MathBlock", "WriterlyCodeBlock"]),
      dl.trim("p"),
      dl.delete_if_empty("p"),
      // dl.unwrap_if_unique_child_is(#("Highlight", "pre")),
      // dl.rename_if_has_key_value(#("Statement", "Theorem", "title", "*Theorem*")),
      // dl.rename_if_has_key_value(#("Highlight", "Proof", "title", "*Beweis*")),
      // dl.rename_if_has_key_value(#("Highlight", "Proof", "title", "*Beweis.*")),
      // dl.rename_if_has_key_value(#("Remark", "Proof", "title", "*Beweis*")),
      // dl.rename_if_has_key_value(#("Remark", "Proof", "title", "*Beweis.*")),
      // dl.rename_if_has_key_value(#("Statement", "Theorem", "title", "*Theorem*")),
      // dl.rename_if_has_key_value(#("Statement", "Observation", "title", "*Beobachtung*")),
      // dl.rename_if_has_key_value(#("Statement", "Example", "title", "*Beispiel*")),
      // dl.rename_if_has_key_value(#("Statement", "Exercise", "title", "*Ãœbungsaufgabe*")), // 6-11, 9-5, 9-7
      // dl.rename_if_has_key_value(#("Statement", "Definition", "title", "*Definition*")),
      // dl.rename_if_has_key_value(#("Statement", "Lemma", "title", "*Lemma*")),
      // dl.rename_if_has_key_value(#("Statement", "Claim", "title", "*Behauptung*")),
      // dl.rename_if_has_key_value(#("Statement", "Problem", "title", "*Problem*")),
      // dl.rename_if_has_key_value(#("Statement", "Algorithm", "title", "*Algorithmus*")),
      dl.rename_if_has_key_value(#("Statement", "Demo", "title", "*Demo*")),
      dl.add_between(#("p", "p", "WriterlyBlankLine", [])),
      dl.add_between(#("WriterlyCodeBlock", "p", "WriterlyBlankLine", [])),
      dl.add_before(#("WriterlyCodeBlock", "WriterlyBlankLine", [])),
      dl.add_between(#("MathBlock", "p", "WriterlyBlankLine", [])),
      dl.add_between(#("TopicAnnouncement", "p", "WriterlyBlankLine", [])),
      dl.add_between(#("SubtopicAnnouncement", "p", "WriterlyBlankLine", [])),
      dl.add_between(#("Exercise", "p", "WriterlyBlankLine", [])),
      dl.add_between(#("Remark", "p", "WriterlyBlankLine", [])),
      dl.add_between(#("Theorem", "p", "WriterlyBlankLine", [])),
      dl.add_between(#("Proof", "p", "WriterlyBlankLine", [])),
      dl.add_between(#("Definition", "p", "WriterlyBlankLine", [])),
      dl.add_between(#("Observation", "p", "WriterlyBlankLine", [])),
      dl.add_between(#("Example", "p", "WriterlyBlankLine", [])),
      dl.add_between(#("Lemma", "p", "WriterlyBlankLine", [])),
      dl.add_between(#("Claim", "p", "WriterlyBlankLine", [])),
      dl.add_between(#("Problem", "p", "WriterlyBlankLine", [])),
      dl.add_between(#("Algorithm", "p", "WriterlyBlankLine", [])),
      dl.add_between(#("Demo", "p", "WriterlyBlankLine", [])),
      dl.add_between(#("Statement", "p", "WriterlyBlankLine", [])),
      dl.add_between(#("h3", "p", "WriterlyBlankLine", [])),
      dl.add_between(#("h2", "p", "WriterlyBlankLine", [])),
      dl.add_between(#("ol", "p", "WriterlyBlankLine", [])),
      dl.add_between(#("ul", "p", "WriterlyBlankLine", [])),
      dl.add_between(#("figure", "p", "WriterlyBlankLine", [])),
      dl.add_between(#("Carousel", "p", "WriterlyBlankLine", [])),
      dl.add_between(#("pre", "p", "WriterlyBlankLine", [])),
      dl.add_between(#("div", "p", "WriterlyBlankLine", [])),
      dl.add_between(#("Highlight", "p", "WriterlyBlankLine", [])),
      dl.add_before_but_not_before_first_child(#("MathBlock", "WriterlyBlankLine", [])),
      dl.add_before_but_not_before_first_child(#("TopicAnnouncement", "WriterlyBlankLine", [])),
      dl.add_before_but_not_before_first_child(#("SubtopicAnnouncement", "WriterlyBlankLine", [])),
      dl.add_before_but_not_before_first_child(#("Exercise", "WriterlyBlankLine", [])),
      dl.add_before_but_not_before_first_child(#("Remark", "WriterlyBlankLine", [])),
      dl.add_before_but_not_before_first_child(#("Theorem", "WriterlyBlankLine", [])),
      dl.add_before_but_not_before_first_child(#("Proof", "WriterlyBlankLine", [])),
      dl.add_before_but_not_before_first_child(#("Definition", "WriterlyBlankLine", [])),
      dl.add_before_but_not_before_first_child(#("Observation", "WriterlyBlankLine", [])),
      dl.add_before_but_not_before_first_child(#("Example", "WriterlyBlankLine", [])),
      dl.add_before_but_not_before_first_child(#("Lemma", "WriterlyBlankLine", [])),
      dl.add_before_but_not_before_first_child(#("Claim", "WriterlyBlankLine", [])),
      dl.add_before_but_not_before_first_child(#("Problem", "WriterlyBlankLine", [])),
      dl.add_before_but_not_before_first_child(#("Algorithm", "WriterlyBlankLine", [])),
      dl.add_before_but_not_before_first_child(#("Demo", "WriterlyBlankLine", [])),
      dl.add_before_but_not_before_first_child(#("Statement", "WriterlyBlankLine", [])),
      dl.add_before_but_not_before_first_child(#("h3", "WriterlyBlankLine", [])),
      dl.add_before_but_not_before_first_child(#("h2", "WriterlyBlankLine", [])),
      dl.add_before_but_not_before_first_child(#("ol", "WriterlyBlankLine", [])),
      dl.add_before_but_not_before_first_child(#("ul", "WriterlyBlankLine", [])),
      dl.add_before_but_not_before_first_child(#("li", "WriterlyBlankLine", [])),
      dl.add_before_but_not_before_first_child(#("figure", "WriterlyBlankLine", [])),
      dl.add_before_but_not_before_first_child(#("Carousel", "WriterlyBlankLine", [])),
      dl.add_before_but_not_before_first_child(#("pre", "WriterlyBlankLine", [])),
      dl.add_before_but_not_before_first_child(#("div", "WriterlyBlankLine", [])),
      dl.add_before_but_not_before_first_child(#("Highlight", "WriterlyBlankLine", [])),
      dl.prepend(#("Chapter", "WriterlyBlankLine", [])),
      dl.prepend(#("Sub", "WriterlyBlankLine", [])),
      dl.unwrap("p"),
      dl.unwrap("MathBlock"),
      dl.delete_attribute__batch(["test", "t"]),
    ]
  ]
  |> list.flatten
  |> infra.desugarers_2_pipeline
}
